{"version":3,"sources":["../../src/lib/log.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAM,eAAe,UAAS,IAAT,EAAe;AAClC,SAAO,QAAQ,CAAC,IAAD,EAAO,OAAP,CAAf;AACA,QAAM,MAAM,eAAK,OAAL,CAAa,eAAK,OAAL,CAAa,QAAQ,OAAR,CAAgB,QAAhB,CAAb,CAAb,EAAsD,IAAtD,EAA4D,KAA5D,EAAmE,QAAnE,CAAZ;AACA,QAAM,SAAS,uBAAQ,SAAS,KAAT,CAAe,IAAf,EAAqB;AAC1C,SAAK,KAAL,CAAW,IAAX;AACD,GAFc,EAEZ,SAAS,GAAT,GAAgB;AACjB,SAAK,KAAL,CAAW,IAAX;AACD,GAJc,CAAf;;AAMA,MAAI,OAAO,aAAG,UAAH,CAAc,GAAd,CAAX,EAA+B;AAC7B,UAAM,YAAY,0BAAM,GAAN,EAAW,CAAC,IAAD,EAAO,OAAP,CAAX,EAA4B;AAC5C,aAAO,CAAC,IAAD,EAAO,QAAQ,MAAf,EAAuB,QAAQ,MAA/B;AADqC,KAA5B,CAAlB;AAGA,WAAO,IAAP,CAAY,UAAU,KAAtB;AACD;;AAED,SAAO,MAAP;AACD,CAjBD;;AAmBA,MAAM,UAAU;AACd,OAAK,GAAL,EAAU,OAAV,EAAmB;AACjB,UAAM,MAAM,iBAAO,YAAP,CAAoB;AAC9B,YAAM,IAAI,IADoB;AAE9B,aAAO,WAAW,QAAQ,KAAnB,IAA4B,QAAQ,GAAR,CAAY,aAAxC,IAAyD,OAFlC;AAG9B,cAAQ,QAAQ,GAAR,CAAY,cAAZ,KAA+B,IAA/B,IAAuC,QAAQ,MAAR,CAAe,KAAtD,IAA+D,QAAQ,GAAR,CAAY,cAAZ,IAA8B,QAA7F,GAAwG,cAAxG,GAAyH,QAAQ;AAH3G,KAApB,CAAZ;AAKA,YAAQ,KAAR,GAAgB,IAAI,KAAJ,CAAU,IAAV,CAAe,GAAf,CAAhB;AACA,YAAQ,KAAR,GAAgB,IAAI,KAAJ,CAAU,IAAV,CAAe,GAAf,CAAhB;AACA,YAAQ,IAAR,GAAe,IAAI,IAAJ,CAAS,IAAT,CAAc,GAAd,CAAf;AACA,YAAQ,IAAR,GAAe,IAAI,IAAJ,CAAS,IAAT,CAAc,GAAd,CAAf;AACA,YAAQ,KAAR,GAAgB,IAAI,KAAJ,CAAU,IAAV,CAAe,GAAf,CAAhB;AACA,YAAQ,KAAR,GAAgB,IAAI,KAAJ,CAAU,IAAV,CAAe,GAAf,CAAhB;AACA,YAAQ,IAAR,GAAe,IAAf;AACA,YAAQ,IAAR,CAAa,UAAb,EAAyB,IAAI,IAA7B,EAAmC,IAAI,OAAvC;AACA,YAAQ,IAAR,CAAa,mBAAb,EAAkC,kBAAO,IAAzC,EAA+C,kBAAO,OAAtD;AACD;AAhBa,CAAhB;;kBAmBe,O","file":"log.js","sourcesContent":["import bunyan from 'bunyan'\nimport { spawn } from 'child_process'\nimport path from 'path'\nimport fs from 'fs'\nimport through from 'through'\nimport logpkg from '../../package.json'\n\nconst prettyStream = function(args) {\n  args = args || ['-o', 'short']\n  const bin = path.resolve(path.dirname(require.resolve('bunyan')), '..', 'bin', 'bunyan');\n  const stream = through(function write(data) {\n    this.queue(data)\n  }, function end () {\n    this.queue(null);\n  });\n\n  if (bin && fs.existsSync(bin)) {\n    const formatter = spawn(bin, ['-o', 'short'], {\n      stdio: [null, process.stdout, process.stderr]\n    })\n    stream.pipe(formatter.stdin)\n  }\n\n  return stream\n};\n\nconst amp_log = {\n  init(pkg, options) {\n    const log = bunyan.createLogger({\n      name: pkg.name,\n      level: options && options.level || process.env.AMP_LOG_LEVEL || \"debug\",\n      stream: process.env.AMP_LOG_FORMAT !== null && process.stdout.isTTY || process.env.AMP_LOG_FORMAT == \"pretty\" ? prettyStream() : process.stdout,\n    })\n    amp_log.trace = log.trace.bind(log)\n    amp_log.debug = log.debug.bind(log)\n    amp_log.info = log.info.bind(log)\n    amp_log.warn = log.warn.bind(log)\n    amp_log.error = log.error.bind(log)\n    amp_log.fatal = log.fatal.bind(log)\n    amp_log.init = null\n    amp_log.info(\"starting\", pkg.name, pkg.version)\n    amp_log.info(\"using amp-log-lib\", logpkg.name, logpkg.version)\n  }\n}\n\nexport default amp_log;\n"]}