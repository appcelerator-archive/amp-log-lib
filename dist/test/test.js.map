{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA;;AACA;;AAEA;;;;AACA;;;;;;;;;;;;;;AAUA,SAAS,OAAT,EAAkB,YAAW;;;AAG3B,KAAG,kDAAH,EAAuD;AAAA,QACjD,KADiD,EAEjD,IAFiD;AAAA;AAAA;AAAA;AAAA;AACjD,iBADiD,GACzC,WADyC;AAAA;AAAA,4CAEpC,qBAAW,YAAX,CAAwB,KAAxB,CAFoC;;AAAA;AAEjD,gBAFiD;;AAGrD,kCAAO,IAAP;AACA,6BAAO,KAAP,CAAa,KAAK,KAAlB,EAAyB,KAAzB;AACA,6BAAO,KAAP,CAAa,KAAK,IAAlB,EAAwB,aAAxB;AACA,6BAAO,KAAP,CAAa,KAAK,IAAlB,EAAwB,+BAAxB;;AANqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvD;AASD,CAZD","file":"test.js","sourcesContent":["import 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport assert from 'assert';\nimport GitHubUser from '../lib/GitHubUser';\n\n// WARNING: don't use arrow functions with mocha describe(), it(),\n// and all the other standard mocha functions that take callbacks\n// if you want to be able to use `this.timeout()`. Because of the way\n// arrow functions work, the `this` context will be the module, not\n// the mocha context in the callback. Even if you don't anticipate\n// needing access to the mocha `this` context in the callbacks, it's\n// best to use full `function()` syntax for the mocha functions.\n\ndescribe('tests', function() {\n\n  // This is an auto-generated sample test to demo testing async functions\n  it('should fetch GitHub user details for \"subfuzion\"', async function () {\n    let login = 'subfuzion';\n    let user = await GitHubUser.fetchDetails(login);\n    assert(user);\n    assert.equal(user.login, login);\n    assert.equal(user.name, 'Tony Pujals');\n    assert.equal(user.blog, 'https://twitter.com/subfuzion');\n  });\n\n});\n"]}